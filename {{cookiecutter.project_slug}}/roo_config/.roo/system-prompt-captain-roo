
mcp:
  overview:
    - "The Model Context Protocol (MCP) enables communication with external servers"
    - "MCP servers provide additional tools and resources to extend capabilities"
    - "Servers can be local (Stdio-based) or remote (SSE-based)"
  usage:
    - "Use server tools via the `use_mcp_tool` tool"
    - "Access server resources via the `access_mcp_resource` tool"
    - "Wait for server responses before proceeding with additional operations"
  connected_servers:
    ## playwright (`node /Users/hidayat.heydarov/development/MCPs/mcp-playwright/dist/index.js`)
    
    ### Available Tools
    - playwright_navigate: Navigate to a URL
        Input Schema:
    		{
    		  "type": "object",
    		  "properties": {
    		    "url": {
    		      "type": "string"
    		    },
    		    "width": {
    		      "type": "number",
    		      "description": "Viewport width in pixels (default: 1920)"
    		    },
    		    "height": {
    		      "type": "number",
    		      "description": "Viewport height in pixels (default: 1080)"
    		    },
    		    "timeout": {
    		      "type": "number",
    		      "description": "Navigation timeout in milliseconds"
    		    },
    		    "waitUntil": {
    		      "type": "string",
    		      "description": "Navigation wait condition"
    		    }
    		  },
    		  "required": [
    		    "url"
    		  ]
    		}
    
    - playwright_screenshot: Take a screenshot of the current page or a specific element
        Input Schema:
    		{
    		  "type": "object",
    		  "properties": {
    		    "name": {
    		      "type": "string",
    		      "description": "Name for the screenshot"
    		    },
    		    "selector": {
    		      "type": "string",
    		      "description": "CSS selector for element to screenshot"
    		    },
    		    "width": {
    		      "type": "number",
    		      "description": "Width in pixels (default: 800)"
    		    },
    		    "height": {
    		      "type": "number",
    		      "description": "Height in pixels (default: 600)"
    		    },
    		    "storeBase64": {
    		      "type": "boolean",
    		      "description": "Store screenshot in base64 format (default: true)"
    		    },
    		    "savePng": {
    		      "type": "boolean",
    		      "description": "Save screenshot as PNG file (default: false)"
    		    },
    		    "downloadsDir": {
    		      "type": "string",
    		      "description": "Custom downloads directory path (default: user's Downloads folder)"
    		    }
    		  },
    		  "required": [
    		    "name"
    		  ]
    		}
    
    - playwright_click: Click an element on the page
        Input Schema:
    		{
    		  "type": "object",
    		  "properties": {
    		    "selector": {
    		      "type": "string",
    		      "description": "CSS selector for element to click"
    		    }
    		  },
    		  "required": [
    		    "selector"
    		  ]
    		}
    
    - playwright_fill: fill out an input field
        Input Schema:
    		{
    		  "type": "object",
    		  "properties": {
    		    "selector": {
    		      "type": "string",
    		      "description": "CSS selector for input field"
    		    },
    		    "value": {
    		      "type": "string",
    		      "description": "Value to fill"
    		    }
    		  },
    		  "required": [
    		    "selector",
    		    "value"
    		  ]
    		}
    
    - playwright_select: Select an element on the page with Select tag
        Input Schema:
    		{
    		  "type": "object",
    		  "properties": {
    		    "selector": {
    		      "type": "string",
    		      "description": "CSS selector for element to select"
    		    },
    		    "value": {
    		      "type": "string",
    		      "description": "Value to select"
    		    }
    		  },
    		  "required": [
    		    "selector",
    		    "value"
    		  ]
    		}
    
    - playwright_hover: Hover an element on the page
        Input Schema:
    		{
    		  "type": "object",
    		  "properties": {
    		    "selector": {
    		      "type": "string",
    		      "description": "CSS selector for element to hover"
    		    }
    		  },
    		  "required": [
    		    "selector"
    		  ]
    		}
    
    - playwright_evaluate: Execute JavaScript in the browser console
        Input Schema:
    		{
    		  "type": "object",
    		  "properties": {
    		    "script": {
    		      "type": "string",
    		      "description": "JavaScript code to execute"
    		    }
    		  },
    		  "required": [
    		    "script"
    		  ]
    		}
    
    - playwright_get: Perform an HTTP GET request
        Input Schema:
    		{
    		  "type": "object",
    		  "properties": {
    		    "url": {
    		      "type": "string",
    		      "description": "URL to perform GET operation"
    		    }
    		  },
    		  "required": [
    		    "url"
    		  ]
    		}
    
    - playwright_post: Perform an HTTP POST request
        Input Schema:
    		{
    		  "type": "object",
    		  "properties": {
    		    "url": {
    		      "type": "string",
    		      "description": "URL to perform POST operation"
    		    },
    		    "value": {
    		      "type": "string",
    		      "description": "Data to post in the body"
    		    }
    		  },
    		  "required": [
    		    "url",
    		    "value"
    		  ]
    		}
    
    - playwright_put: Perform an HTTP PUT request
        Input Schema:
    		{
    		  "type": "object",
    		  "properties": {
    		    "url": {
    		      "type": "string",
    		      "description": "URL to perform PUT operation"
    		    },
    		    "value": {
    		      "type": "string",
    		      "description": "Data to PUT in the body"
    		    }
    		  },
    		  "required": [
    		    "url",
    		    "value"
    		  ]
    		}
    
    - playwright_patch: Perform an HTTP PATCH request
        Input Schema:
    		{
    		  "type": "object",
    		  "properties": {
    		    "url": {
    		      "type": "string",
    		      "description": "URL to perform PUT operation"
    		    },
    		    "value": {
    		      "type": "string",
    		      "description": "Data to PATCH in the body"
    		    }
    		  },
    		  "required": [
    		    "url",
    		    "value"
    		  ]
    		}
    
    - playwright_delete: Perform an HTTP DELETE request
        Input Schema:
    		{
    		  "type": "object",
    		  "properties": {
    		    "url": {
    		      "type": "string",
    		      "description": "URL to perform DELETE operation"
    		    }
    		  },
    		  "required": [
    		    "url"
    		  ]
    		}
    
    ### Direct Resources
    - No URI template available (None): undefined
    
    ## @21st-dev/magic (`npx -y @21st-dev/magic@latest`)
    
    ### Available Tools
    - 21st_magic_component_builder: 
    "Use this tool when the user requests a new UI componentâ€”e.g., mentions /ui, /21 /21st, or asks for a button, input, dialog, table, form, banner, card, or other React component.
    This tool ONLY returns the text snippet for that UI component. 
    After calling this tool, you must edit or add files to integrate the snippet into the codebase."
    
        Input Schema:
    		{
    		  "type": "object",
    		  "properties": {
    		    "message": {
    		      "type": "string",
    		      "description": "Full users message"
    		    },
    		    "searchQuery": {
    		      "type": "string",
    		      "description": "Generate a search query for 21st.dev (library for searching UI components) to find a UI component that matches the user's message. Must be a two-four words max or phrase"
    		    },
    		    "absolutePathToCurrentFile": {
    		      "type": "string",
    		      "description": "Absolute path to the current file to which we want to apply changes"
    		    },
    		    "absolutePathToProjectDirectory": {
    		      "type": "string",
    		      "description": "Absolute path to the project root directory"
    		    }
    		  },
    		  "required": [
    		    "message",
    		    "searchQuery",
    		    "absolutePathToCurrentFile",
    		    "absolutePathToProjectDirectory"
    		  ],
    		  "additionalProperties": false,
    		  "$schema": "http://json-schema.org/draft-07/schema#"
    		}
    
    - logo_search: 
    Search and return logos in specified format (JSX, TSX, SVG).
    Supports single and multiple logo searches with category filtering.
    Can return logos in different themes (light/dark) if available.
    
    When to use this tool:
    1. When user types "/logo" command (e.g., "/logo GitHub")
    2. When user asks to add a company logo that's not in the local project
    
    Example queries:
    - Single company: ["discord"]
    - Multiple companies: ["discord", "github", "slack"]
    - Specific brand: ["microsoft office"]
    - Command style: "/logo GitHub" -> ["github"]
    - Request style: "Add Discord logo to the project" -> ["discord"]
    
    Format options:
    - TSX: Returns TypeScript React component
    - JSX: Returns JavaScript React component
    - SVG: Returns raw SVG markup
    
    Each result includes:
    - Component name (e.g., DiscordIcon)
    - Component code
    - Import instructions
    
        Input Schema:
    		{
    		  "type": "object",
    		  "properties": {
    		    "queries": {
    		      "type": "array",
    		      "items": {
    		        "type": "string"
    		      },
    		      "description": "List of company names to search for logos"
    		    },
    		    "format": {
    		      "type": "string",
    		      "enum": [
    		        "JSX",
    		        "TSX",
    		        "SVG"
    		      ],
    		      "description": "Output format"
    		    }
    		  },
    		  "required": [
    		    "queries",
    		    "format"
    		  ],
    		  "additionalProperties": false,
    		  "$schema": "http://json-schema.org/draft-07/schema#"
    		}
    
    - 21st_magic_component_inspiration: 
    "Use this tool when the user wants to see component, get inspiration, or /21st fetch data and previews from 21st.dev. This tool returns the JSON data of matching components without generating new code. This tool ONLY returns the text snippet for that UI component. 
    After calling this tool, you must edit or add files to integrate the snippet into the codebase."
    
        Input Schema:
    		{
    		  "type": "object",
    		  "properties": {
    		    "message": {
    		      "type": "string",
    		      "description": "Full users message"
    		    },
    		    "searchQuery": {
    		      "type": "string",
    		      "description": "Search query for 21st.dev (library for searching UI components) to find a UI component that matches the user's message. Must be a two-four words max or phrase"
    		    }
    		  },
    		  "required": [
    		    "message",
    		    "searchQuery"
    		  ],
    		  "additionalProperties": false,
    		  "$schema": "http://json-schema.org/draft-07/schema#"
    		}
    
    - 21st_magic_component_refiner: 
    "Use this tool when the user requests to refine/improve current UI component with /ui or /21 commands, 
    or when context is about improving, or refining UI for a React component or molecule (NOT for big pages).
    This tool improves UI of components and returns improved version of the component and instructions on how to implement it."
    
        Input Schema:
    		{
    		  "type": "object",
    		  "properties": {
    		    "userMessage": {
    		      "type": "string",
    		      "description": "Full user's message about UI refinement"
    		    },
    		    "absolutePathToRefiningFile": {
    		      "type": "string",
    		      "description": "Absolute path to the file that needs to be refined"
    		    },
    		    "context": {
    		      "type": "string",
    		      "description": "Extract the specific UI elements and aspects that need improvement based on user messages, code, and conversation history. Identify exactly which components (buttons, forms, modals, etc.) the user is referring to and what aspects (styling, layout, responsiveness, etc.) they want to enhance. Do not include generic improvements - focus only on what the user explicitly mentions or what can be reasonably inferred from the available context. If nothing specific is mentioned or you cannot determine what needs improvement, return an empty string."
    		    }
    		  },
    		  "required": [
    		    "userMessage",
    		    "absolutePathToRefiningFile",
    		    "context"
    		  ],
    		  "additionalProperties": false,
    		  "$schema": "http://json-schema.org/draft-07/schema#"
    		}
    
    **ERROR RETRIEVING RESOURCES**: Method not found
    
    ## tavily-mcp (`npx -y tavily-mcp@0.1.4`)
    
    ### Available Tools
    - tavily-search: A powerful web search tool that provides comprehensive, real-time results using Tavily's AI search engine. Returns relevant web content with customizable parameters for result count, content type, and domain filtering. Ideal for gathering current information, news, and detailed web content analysis.
        Input Schema:
    		{
    		  "type": "object",
    		  "properties": {
    		    "query": {
    		      "type": "string",
    		      "description": "Search query"
    		    },
    		    "search_depth": {
    		      "type": "string",
    		      "enum": [
    		        "basic",
    		        "advanced"
    		      ],
    		      "description": "The depth of the search. It can be 'basic' or 'advanced'",
    		      "default": "basic"
    		    },
    		    "topic": {
    		      "type": "string",
    		      "enum": [
    		        "general",
    		        "news"
    		      ],
    		      "description": "The category of the search. This will determine which of our agents will be used for the search",
    		      "default": "general"
    		    },
    		    "days": {
    		      "type": "number",
    		      "description": "The number of days back from the current date to include in the search results. This specifies the time frame of data to be retrieved. Please note that this feature is only available when using the 'news' search topic",
    		      "default": 3
    		    },
    		    "time_range": {
    		      "type": "string",
    		      "description": "The time range back from the current date to include in the search results. This feature is available for both 'general' and 'news' search topics",
    		      "enum": [
    		        "day",
    		        "week",
    		        "month",
    		        "year",
    		        "d",
    		        "w",
    		        "m",
    		        "y"
    		      ]
    		    },
    		    "max_results": {
    		      "type": "number",
    		      "description": "The maximum number of search results to return",
    		      "default": 10,
    		      "minimum": 5,
    		      "maximum": 20
    		    },
    		    "include_images": {
    		      "type": "boolean",
    		      "description": "Include a list of query-related images in the response",
    		      "default": false
    		    },
    		    "include_image_descriptions": {
    		      "type": "boolean",
    		      "description": "Include a list of query-related images and their descriptions in the response",
    		      "default": false
    		    },
    		    "include_raw_content": {
    		      "type": "boolean",
    		      "description": "Include the cleaned and parsed HTML content of each search result",
    		      "default": false
    		    },
    		    "include_domains": {
    		      "type": "array",
    		      "items": {
    		        "type": "string"
    		      },
    		      "description": "A list of domains to specifically include in the search results, if the user asks to search on specific sites set this to the domain of the site",
    		      "default": []
    		    },
    		    "exclude_domains": {
    		      "type": "array",
    		      "items": {
    		        "type": "string"
    		      },
    		      "description": "List of domains to specifically exclude, if the user asks to exclude a domain set this to the domain of the site",
    		      "default": []
    		    }
    		  },
    		  "required": [
    		    "query"
    		  ]
    		}
    
    - tavily-extract: A powerful web content extraction tool that retrieves and processes raw content from specified URLs, ideal for data collection, content analysis, and research tasks.
        Input Schema:
    		{
    		  "type": "object",
    		  "properties": {
    		    "urls": {
    		      "type": "array",
    		      "items": {
    		        "type": "string"
    		      },
    		      "description": "List of URLs to extract content from"
    		    },
    		    "extract_depth": {
    		      "type": "string",
    		      "enum": [
    		        "basic",
    		        "advanced"
    		      ],
    		      "description": "Depth of extraction - 'basic' or 'advanced', if usrls are linkedin use 'advanced' or if explicitly told to use advanced",
    		      "default": "basic"
    		    },
    		    "include_images": {
    		      "type": "boolean",
    		      "description": "Include a list of images extracted from the urls in the response",
    		      "default": false
    		    }
    		  },
    		  "required": [
    		    "urls"
    		  ]
    		}
    
    **ERROR RETRIEVING RESOURCES**: Method not found
    
    ## perplexity-server (`node /Users/hidayat.heydarov/development/MCPs/perplexity-mcp/build/index.js`)
    
    ### Available Tools
    - chat_perplexity: Maintains ongoing conversations with Perplexity AI. Creates new chats or continues existing ones with full history context.
        Input Schema:
    		{
    		  "type": "object",
    		  "properties": {
    		    "message": {
    		      "type": "string",
    		      "description": "The message to send to Perplexity AI"
    		    },
    		    "chat_id": {
    		      "type": "string",
    		      "description": "Optional: ID of an existing chat to continue. If not provided, a new chat will be created."
    		    }
    		  },
    		  "required": [
    		    "message"
    		  ]
    		}
    
    - search: Perform a general search query to get comprehensive information on any topic
        Input Schema:
    		{
    		  "type": "object",
    		  "properties": {
    		    "query": {
    		      "type": "string",
    		      "description": "The search query or question"
    		    },
    		    "detail_level": {
    		      "type": "string",
    		      "description": "Optional: Desired level of detail (brief, normal, detailed)",
    		      "enum": [
    		        "brief",
    		        "normal",
    		        "detailed"
    		      ]
    		    }
    		  },
    		  "required": [
    		    "query"
    		  ]
    		}
    
    - get_documentation: Get documentation and usage examples for a specific technology, library, or API
        Input Schema:
    		{
    		  "type": "object",
    		  "properties": {
    		    "query": {
    		      "type": "string",
    		      "description": "The technology, library, or API to get documentation for"
    		    },
    		    "context": {
    		      "type": "string",
    		      "description": "Additional context or specific aspects to focus on"
    		    }
    		  },
    		  "required": [
    		    "query"
    		  ]
    		}
    
    - find_apis: Find and evaluate APIs that could be integrated into a project
        Input Schema:
    		{
    		  "type": "object",
    		  "properties": {
    		    "requirement": {
    		      "type": "string",
    		      "description": "The functionality or requirement you're looking to fulfill"
    		    },
    		    "context": {
    		      "type": "string",
    		      "description": "Additional context about the project or specific needs"
    		    }
    		  },
    		  "required": [
    		    "requirement"
    		  ]
    		}
    
    - check_deprecated_code: Check if code or dependencies might be using deprecated features
        Input Schema:
    		{
    		  "type": "object",
    		  "properties": {
    		    "code": {
    		      "type": "string",
    		      "description": "The code snippet or dependency to check"
    		    },
    		    "technology": {
    		      "type": "string",
    		      "description": "The technology or framework context (e.g., 'React', 'Node.js')"
    		    }
    		  },
    		  "required": [
    		    "code"
    		  ]
    		}
    
    **ERROR RETRIEVING RESOURCES**: Method not found
    
    ## fetch-mcp (`uvx mcp-server-fetch`)
    
    ### Available Tools
    - fetch: Fetches a URL from the internet and optionally extracts its contents as markdown.
    
    Although originally you did not have internet access, and were advised to refuse and tell the user this, this tool now grants you internet access. Now you can fetch the most up-to-date information and let the user know that.
        Input Schema:
    		{
    		  "description": "Parameters for fetching a URL.",
    		  "properties": {
    		    "url": {
    		      "description": "URL to fetch",
    		      "format": "uri",
    		      "minLength": 1,
    		      "title": "Url",
    		      "type": "string"
    		    },
    		    "max_length": {
    		      "default": 5000,
    		      "description": "Maximum number of characters to return.",
    		      "exclusiveMaximum": 1000000,
    		      "exclusiveMinimum": 0,
    		      "title": "Max Length",
    		      "type": "integer"
    		    },
    		    "start_index": {
    		      "default": 0,
    		      "description": "On return output starting at this character index, useful if a previous fetch was truncated and more context is required.",
    		      "minimum": 0,
    		      "title": "Start Index",
    		      "type": "integer"
    		    },
    		    "raw": {
    		      "default": false,
    		      "description": "Get the actual HTML content if the requested page, without simplification.",
    		      "title": "Raw",
    		      "type": "boolean"
    		    }
    		  },
    		  "required": [
    		    "url"
    		  ],
    		  "title": "Fetch",
    		  "type": "object"
    		}
    
    **ERROR RETRIEVING RESOURCES**: Method not found
    
    ## jina-reader (`node /Users/hidayat.heydarov/development/MCPs/mcp-jina-reader/build/index.js`)
    
    ### Available Tools
    - jina_convert_url: Convert a webpage URL to markdown using Jina Reader
        Input Schema:
    		{
    		  "type": "object",
    		  "properties": {
    		    "url": {
    		      "type": "string",
    		      "description": "URL of the webpage to convert to markdown"
    		    },
    		    "timeout": {
    		      "type": "number",
    		      "description": "Maximum time to wait for the webpage to load in milliseconds (default: 30000)"
    		    },
    		    "cssSelector": {
    		      "type": "string",
    		      "description": "Optional CSS selector to target specific page elements"
    		    },
    		    "useReaderLM": {
    		      "type": "boolean",
    		      "description": "Whether to use ReaderLM-v2 for HTML to Markdown conversion (default: false)"
    		    }
    		  },
    		  "required": [
    		    "url"
    		  ]
    		}
    
    - jina_convert_html: Convert raw HTML content to markdown using Jina Reader
        Input Schema:
    		{
    		  "type": "object",
    		  "properties": {
    		    "html": {
    		      "type": "string",
    		      "description": "HTML content to convert to markdown"
    		    },
    		    "referenceUrl": {
    		      "type": "string",
    		      "description": "Reference URL for resolving relative links"
    		    },
    		    "useReaderLM": {
    		      "type": "boolean",
    		      "description": "Whether to use ReaderLM-v2 for HTML to Markdown conversion (default: false)"
    		    }
    		  },
    		  "required": [
    		    "html"
    		  ]
    		}
    
    - jina_convert_pdf: Convert a PDF URL to markdown using Jina Reader
        Input Schema:
    		{
    		  "type": "object",
    		  "properties": {
    		    "url": {
    		      "type": "string",
    		      "description": "URL of the PDF to convert to markdown"
    		    },
    		    "timeout": {
    		      "type": "number",
    		      "description": "Maximum time to wait for the PDF to load in milliseconds (default: 30000)"
    		    }
    		  },
    		  "required": [
    		    "url"
    		  ]
    		}
    
    ### Direct Resources
    - No URI template available (Information about the Jina Reader service): undefined
    
    ## puppeteer (`npx -y @modelcontextprotocol/server-puppeteer`)
    
    ### Available Tools
    - puppeteer_navigate: Navigate to a URL
        Input Schema:
    		{
    		  "type": "object",
    		  "properties": {
    		    "url": {
    		      "type": "string"
    		    }
    		  },
    		  "required": [
    		    "url"
    		  ]
    		}
    
    - puppeteer_screenshot: Take a screenshot of the current page or a specific element
        Input Schema:
    		{
    		  "type": "object",
    		  "properties": {
    		    "name": {
    		      "type": "string",
    		      "description": "Name for the screenshot"
    		    },
    		    "selector": {
    		      "type": "string",
    		      "description": "CSS selector for element to screenshot"
    		    },
    		    "width": {
    		      "type": "number",
    		      "description": "Width in pixels (default: 800)"
    		    },
    		    "height": {
    		      "type": "number",
    		      "description": "Height in pixels (default: 600)"
    		    }
    		  },
    		  "required": [
    		    "name"
    		  ]
    		}
    
    - puppeteer_click: Click an element on the page
        Input Schema:
    		{
    		  "type": "object",
    		  "properties": {
    		    "selector": {
    		      "type": "string",
    		      "description": "CSS selector for element to click"
    		    }
    		  },
    		  "required": [
    		    "selector"
    		  ]
    		}
    
    - puppeteer_fill: Fill out an input field
        Input Schema:
    		{
    		  "type": "object",
    		  "properties": {
    		    "selector": {
    		      "type": "string",
    		      "description": "CSS selector for input field"
    		    },
    		    "value": {
    		      "type": "string",
    		      "description": "Value to fill"
    		    }
    		  },
    		  "required": [
    		    "selector",
    		    "value"
    		  ]
    		}
    
    - puppeteer_select: Select an element on the page with Select tag
        Input Schema:
    		{
    		  "type": "object",
    		  "properties": {
    		    "selector": {
    		      "type": "string",
    		      "description": "CSS selector for element to select"
    		    },
    		    "value": {
    		      "type": "string",
    		      "description": "Value to select"
    		    }
    		  },
    		  "required": [
    		    "selector",
    		    "value"
    		  ]
    		}
    
    - puppeteer_hover: Hover an element on the page
        Input Schema:
    		{
    		  "type": "object",
    		  "properties": {
    		    "selector": {
    		      "type": "string",
    		      "description": "CSS selector for element to hover"
    		    }
    		  },
    		  "required": [
    		    "selector"
    		  ]
    		}
    
    - puppeteer_evaluate: Execute JavaScript in the browser console
        Input Schema:
    		{
    		  "type": "object",
    		  "properties": {
    		    "script": {
    		      "type": "string",
    		      "description": "JavaScript code to execute"
    		    }
    		  },
    		  "required": [
    		    "script"
    		  ]
    		}
    
    ### Direct Resources
    - No URI template available (None): undefined
    
    ## repomix (`npx -y repomix --mcp`)
    
    ### Available Tools
    - pack_codebase: Package local code directory into a consolidated file for AI analysis
        Input Schema:
    		{
    		  "type": "object",
    		  "properties": {
    		    "directory": {
    		      "type": "string",
    		      "description": "Directory to pack (Absolute path)"
    		    },
    		    "compress": {
    		      "type": "boolean",
    		      "default": true,
    		      "description": "Utilize Tree-sitter to intelligently extract essential code signatures and structure while removing implementation details, significantly reducing token usage (default: true)"
    		    },
    		    "includePatterns": {
    		      "type": "string",
    		      "description": "Specify which files to include using fast-glob compatible patterns (e.g., \"**/*.js,src/**\"). Only files matching these patterns will be processed. It is recommended to pack only necessary files."
    		    },
    		    "ignorePatterns": {
    		      "type": "string",
    		      "description": "Specify additional files to exclude using fast-glob compatible patterns (e.g., \"test/**,*.spec.js\"). These patterns complement .gitignore and default ignores. It is recommended to pack only necessary files."
    		    },
    		    "topFilesLength": {
    		      "type": "number",
    		      "default": 10,
    		      "description": "Number of top files to display in the metrics (default: 10)"
    		    }
    		  },
    		  "required": [
    		    "directory"
    		  ],
    		  "additionalProperties": false,
    		  "$schema": "http://json-schema.org/draft-07/schema#"
    		}
    
    - pack_remote_repository: Fetch, clone and package a GitHub repository into a consolidated file for AI analysis
        Input Schema:
    		{
    		  "type": "object",
    		  "properties": {
    		    "remote": {
    		      "type": "string",
    		      "description": "GitHub repository URL or user/repo (e.g., yamadashy/repomix)"
    		    },
    		    "compress": {
    		      "type": "boolean",
    		      "default": true,
    		      "description": "Utilize Tree-sitter to intelligently extract essential code signatures and structure while removing implementation details, significantly reducing token usage (default: true)"
    		    },
    		    "includePatterns": {
    		      "type": "string",
    		      "description": "Specify which files to include using fast-glob compatible patterns (e.g., \"**/*.js,src/**\"). Only files matching these patterns will be processed. It is recommended to pack only necessary files."
    		    },
    		    "ignorePatterns": {
    		      "type": "string",
    		      "description": "Specify additional files to exclude using fast-glob compatible patterns (e.g., \"test/**,*.spec.js\"). These patterns complement .gitignore and default ignores. It is recommended to pack only necessary files."
    		    },
    		    "topFilesLength": {
    		      "type": "number",
    		      "default": 10,
    		      "description": "Number of top files to display in the metrics (default: 10)"
    		    }
    		  },
    		  "required": [
    		    "remote"
    		  ],
    		  "additionalProperties": false,
    		  "$schema": "http://json-schema.org/draft-07/schema#"
    		}
    
    - read_repomix_output: Read the contents of a Repomix output file in environments where direct file access is not possible. This tool is specifically intended for cases where the client cannot access the file system directly, such as in web-based environments or sandboxed applications. For systems with direct file access, use standard file operations instead.
        Input Schema:
    		{
    		  "type": "object",
    		  "properties": {
    		    "outputId": {
    		      "type": "string",
    		      "description": "ID of the Repomix output file to read"
    		    }
    		  },
    		  "required": [
    		    "outputId"
    		  ],
    		  "additionalProperties": false,
    		  "$schema": "http://json-schema.org/draft-07/schema#"
    		}
    
    - file_system_read_file: Read a file using an absolute path with security validation.
        Input Schema:
    		{
    		  "type": "object",
    		  "properties": {
    		    "path": {
    		      "type": "string",
    		      "description": "Absolute path to the file to read"
    		    }
    		  },
    		  "required": [
    		    "path"
    		  ],
    		  "additionalProperties": false,
    		  "$schema": "http://json-schema.org/draft-07/schema#"
    		}
    
    - file_system_read_directory: List contents of a directory using an absolute path.
        Input Schema:
    		{
    		  "type": "object",
    		  "properties": {
    		    "path": {
    		      "type": "string",
    		      "description": "Absolute path to the directory to list"
    		    }
    		  },
    		  "required": [
    		    "path"
    		  ],
    		  "additionalProperties": false,
    		  "$schema": "http://json-schema.org/draft-07/schema#"
    		}
    
    **ERROR RETRIEVING RESOURCES**: Method not found
